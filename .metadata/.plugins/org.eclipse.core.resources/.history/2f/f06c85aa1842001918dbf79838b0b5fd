/* 433-294 Object Oriented Software Development
 * RPG Game Engine
 * Code usage from Sample Solution
 * Author: Matt Giuca <mgiuca>
 * 
 * Name: Derek Chen 
 * Student_ID: 766509
 */

import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

/** The character which the user plays as.
 */
public class Player extends Unit{


	
    private Image img_flipped = null;
    
    private Image panel = null;
    
    //initial player stats
    private static final int START_HP = 100;
    private static final int START_DAMAGE = 26;
    private static final int START_COOLDOWN = 600;
    private static final int INVENTORY_SLOTS = 4;
    
    //images for player inventory
    private Image amulet = new Image(RPG.ASSETS_PATH + "/items/amulet.png");
    private Image sword = new Image(RPG.ASSETS_PATH + "/items/sword.png");
    private Image tome = new Image(RPG.ASSETS_PATH + "/items/tome.png");
    private Image elixir = new Image(RPG.ASSETS_PATH + "/items/elixir.png");
    
    private boolean face_left = false;
    private boolean[] inventory = {false,false,false,false};
    
    // Pixels per millisecond
    private static final double SPEED = 0.25;

    public Player(String image_path, double x, double y, String name, String panel_path) throws SlickException {
		super(image_path, x, y, name);
		// TODO Auto-generated constructor stub
        
        img_flipped = getImage().getFlippedCopy(true, false);
        
		panel = new Image(panel_path);
		
		//ensures proper blocking
        setWidth(getImage().getWidth()/2);
        setHeight(getImage().getHeight()/2);
        
        setUnitStats(new Stats(START_COOLDOWN,START_DAMAGE,START_HP,START_HP));
	}
    


    /** Creates a new Player.
     * @param image_path Path of player's image file.
     * @param x The Player's starting x location in pixels.
     * @param y The Player's starting y location in pixels.
     */


    public void update(int delta, World world){
    	
    	if (RPG.isTeleport()) {
    		this.move(world, 2069,510);
    	}
    	
    	/*if you press attack, when you can attack (i.e off cooldown)
    	then reset cooldown */
    	if (getAttackTimer() <= 0 && RPG.isAttacking()) {
    		setAttackTimer((getUnitStats().getCooldown()) );
    		setAttack(false);
    	}
    	//cooldown count down
    	if (isAttack() == false) {
    		setAttackTimer((getAttackTimer() - delta));
    	}
    	//off cooldown, can attack again
    	if (getAttackTimer() <= 0) {
    		setAttack(true);
    	}
    	
    	
    	
    	
    	//make sure player stats are constantly checking for buffs update
    	
		this.getUnitStats().setMaxHP(START_HP + world.getBuffs().getBuffMaxHP());
		
//		this.getUnitStats().setHp(this.getUnitStats().getHp() + world.getBuffs().getBuffMaxHP());

		this.getUnitStats().setCooldown(START_COOLDOWN + world.getBuffs().getBuffCooldown());
		this.getUnitStats().setMaxDamage(START_DAMAGE + world.getBuffs().getBuffDamage());

    }
    
    public void onDeath(World world){
    	if (this.getUnitStats().getHp() <= 0) {
    		setX(World.getElviraStartX());
    		setY(World.getElviraStartY());
    		getUnitStats().setHp(START_HP + world.getBuffs().getBuffMaxHP()); // TODO change this when implemented items, so player always teleport back with upgraded HP
    	}
    	
    }
    
    /** Move the player in a given direction.
     * Prevents the player from moving outside the map space, and also updates
     * the direction the player is facing.
     * @param world The world the player is on (to check blocking).
     * @param dir_x The player's movement in the x axis (-1, 0 or 1).
     * @param dir_y The player's movement in the y axis (-1, 0 or 1).
     * @param delta Time passed since last frame (milliseconds).
     */
    
    
	
	public void updateUnit(int delta, World world, double dir_x, double dir_y) {
        // Update player facing based on X direction
        if (dir_x > 0)
            this.face_left = false;
        else if (dir_x < 0)
            this.face_left = true;
        // Move the player by dir_x, dir_y, as a multiple of delta * speed
		
	}
	
	public void movePlayer(World world, double dir_x, double dir_y, double delta){
        
		double new_x = this.getX() + dir_x * delta * SPEED;
        double new_y = this.getY() + dir_y * delta * SPEED;
		this.move(world, new_x, new_y);
	}
	
	
    

    /** Draw the player to the screen at the correct place.
     * @param g The current Graphics context.
     * @param cam_x Camera x position in pixels.
     * @param cam_y Camera y position in pixels.
     */
    public void renderImage(Graphics g)
    {
        Image which_img;
        which_img = this.face_left ? this.getImg_flipped() : this.getImage();
        which_img.drawCentered((int) getX(), (int) getY());
    }
    
   

	/** Renders the player's status panel.
     * @param g The current Slick graphics context.
     */
    public void renderPanel(Graphics g,World world) {
    	// Panel colours
        Color LABEL = new Color(0.9f, 0.9f, 0.4f);          // Gold
        Color VALUE = new Color(1.0f, 1.0f, 1.0f);          // White
        Color BAR_BG = new Color(0.0f, 0.0f, 0.0f, 0.8f);   // Black, transp
        Color BAR = new Color(0.8f, 0.0f, 0.0f, 0.8f);      // Red, transp

        // Variables for layout
        String text;                // Text to display
        int text_x, text_y;         // Coordinates to draw text
        int bar_x, bar_y;           // Coordinates to draw rectangles
        int bar_width, bar_height;  // Size of rectangle to draw
        int hp_bar_width;           // Size of red (HP) rectangle
        int inv_x, inv_y;           // Coordinates to draw inventory item

        float health_percent;       // Player's health, as a percentage

        int i; //indexing dummy variable
        
        // Panel background image
        panel.draw(0, RPG.SCREEN_HEIGHT - RPG.PANEL_HEIGHT);

        // Display the player's health
        text_x = 15;
        text_y = RPG.SCREEN_HEIGHT - RPG.PANEL_HEIGHT + 25;
        g.setColor(LABEL);
        g.drawString("Health:", text_x, text_y);
                                        

        bar_x = 90;
        bar_y = RPG.SCREEN_HEIGHT - RPG.PANEL_HEIGHT + 20;
        bar_width = 90;
        bar_height = 30;
        
        health_percent = (float) getUnitStats().getPercentHP();
        
        //show hp/max-hp
        text = Integer.toString((int)(this.getUnitStats().getHp())) + "/" +
        		Integer.toString((int)(this.getUnitStats().getMaxHP())); 
        
        hp_bar_width = (int) (bar_width * health_percent);
        text_x = bar_x + (bar_width - g.getFont().getWidth(text)) / 2;
        g.setColor(BAR_BG);
        g.fillRect(bar_x, bar_y, bar_width, bar_height);
        g.setColor(BAR);
        g.fillRect(bar_x, bar_y, hp_bar_width, bar_height);
        g.setColor(VALUE);
        g.drawString(text, text_x, text_y);

        
        // Display the player's damage and cooldown
        text_x = 200;
        g.setColor(LABEL);
        g.drawString("Damage:", text_x, text_y);
        text_x += 80;
        text = Integer.toString((int)this.getUnitStats().getMaxDamage());                                    
        g.setColor(VALUE);
        g.drawString(text, text_x, text_y);
        text_x += 40;
        g.setColor(LABEL);
        g.drawString("Rate:", text_x, text_y);
        text_x += 55;
        text = Integer.toString((int)this.getUnitStats().getCooldown());                                   // TODO: Cooldown
        g.setColor(VALUE);
        g.drawString(text, text_x, text_y);

        // Display the player's inventory
        g.setColor(LABEL);
        g.drawString("Items:", 420, text_y);
        bar_x = 490;
        bar_y = RPG.SCREEN_HEIGHT - RPG.PANEL_HEIGHT + 10;
        bar_width = 288;
        bar_height = bar_height + 20;
        g.setColor(BAR_BG);
        g.fillRect(bar_x, bar_y, bar_width, bar_height);

        inv_x = 490;
        inv_y = RPG.SCREEN_HEIGHT - RPG.PANEL_HEIGHT
            + ((RPG.PANEL_HEIGHT - 72) / 2);
        // for (each item in the player's inventory)                // TODO
        for(i=0;i<INVENTORY_SLOTS;i++){
            if(inventory[i] == true){
            	if(i == world.getAmuletID() ){
            		g.drawImage(amulet, inv_x, inv_y);
            	}
            	else if(i == world.getSwordID() ){
            		g.drawImage(sword, inv_x, inv_y);
            	}
            	else if(i == world.getTomeID() ){
            		g.drawImage(tome, inv_x, inv_y);
            	}
            	else if(i == world.getElixirID() ){
            		g.drawImage(elixir, inv_x, inv_y);
            	}
            }
            inv_x += 72;
        	}
    }



	//ONLY GETTERS AND SETTERS BELOW
    public Image getImg_flipped() {
		return img_flipped;
	}

	public void setImg_flipped(Image img_flipped) {
		this.img_flipped = img_flipped;
	}


	public boolean[] getInventory() {
		return inventory;
	}



	public void setInventory(boolean b,int index) {
		this.inventory[index] = b;
	}
	
	


	
	
}
